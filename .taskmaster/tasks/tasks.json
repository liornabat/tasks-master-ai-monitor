{
  "master": {
    "tasks": [
      {
        "id": 13,
        "title": "Setup Next.js Project with Tailwind CSS and shadcn/ui",
        "description": "Initialize a new Next.js project with TypeScript, Tailwind CSS, and shadcn/ui components to create the foundation for the Task Execution Monitor application.",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "1. Create a new Next.js project with TypeScript:\n```bash\nnpx create-next-app@latest task-execution-monitor --typescript\ncd task-execution-monitor\n```\n\n2. Install and configure Tailwind CSS:\n```bash\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n```\n\n3. Configure Tailwind CSS in `tailwind.config.js`:\n```javascript\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx}',\n    './components/**/*.{js,ts,jsx,tsx}',\n    './app/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n4. Add Tailwind directives to `./styles/globals.css`:\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n5. Install and initialize shadcn/ui (latest version):\n```bash\nnpm install @shadcn/ui\nnpx shadcn-ui@latest init\n```\n\n6. Add required shadcn/ui components:\n```bash\nnpx shadcn-ui@latest add button\nnpx shadcn-ui@latest add input\nnpx shadcn-ui@latest add badge\nnpx shadcn-ui@latest add card\nnpx shadcn-ui@latest add select\nnpx shadcn-ui@latest add progress\n```\n\n7. Install additional dependencies:\n```bash\nnpm install formidable@3.5.1 lucide-react@0.400.0 class-variance-authority@0.7.0 clsx@2.0.0 tailwind-merge@2.0.0\n```\n\n8. Create basic project structure:\n```\n/components\n  /ui (shadcn components)\n  Header.tsx\n  TaskMonitor.tsx\n  TaskPanel.tsx\n  NavigationSidebar.tsx\n/pages\n  index.tsx\n  _app.tsx\n  /api\n    tasks.ts\n    upload.ts\n/public\n/styles\n  globals.css\n/types\n  index.ts\n/uploads (create this directory for file storage)\n```",
        "testStrategy": "1. Verify project setup by running `npm run dev` and ensuring the development server starts without errors\n2. Check that Tailwind CSS is properly configured by adding a test component with Tailwind classes\n3. Verify shadcn/ui components are working by rendering a test button and checking its styling\n4. Test the project structure by ensuring all directories are created and accessible\n5. Validate TypeScript configuration by checking for type errors with `npm run build`",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Next.js project with TypeScript",
            "description": "Initialize a new Next.js project with TypeScript at ./task-monitor-ui/",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Configure Tailwind CSS",
            "description": "Tailwind CSS was automatically installed and configured during project creation",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Initialize shadcn/ui",
            "description": "Successfully initialized shadcn/ui with components.json, updated CSS variables, and created utils.ts",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Add required shadcn/ui components",
            "description": "Install necessary shadcn/ui components:\n```bash\nnpx shadcn-ui@latest add button\nnpx shadcn-ui@latest add input\nnpx shadcn-ui@latest add badge\nnpx shadcn-ui@latest add card\nnpx shadcn-ui@latest add select\nnpx shadcn-ui@latest add progress\n```",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Install additional dependencies",
            "description": "Install required additional packages:\n```bash\nnpm install formidable@3.5.1 lucide-react@0.400.0 class-variance-authority@0.7.0 clsx@2.0.0 tailwind-merge@2.0.0\n```",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Create basic project structure",
            "description": "Set up the project directory structure with necessary folders and initial files",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 14,
        "title": "Implement Task Data Types and Interfaces",
        "description": "Define TypeScript interfaces and types for task data structures to ensure type safety throughout the application.",
        "details": "Create a `/types/index.ts` file with the following TypeScript interfaces:\n\n```typescript\n// Task and related interfaces\nexport interface Task {\n  id: number;\n  title: string;\n  description: string;\n  details: string;\n  testStrategy: string;\n  status: string;\n  priority: string;\n  dependencies: number[];\n  subtasks?: Subtask[];\n  progress?: number;\n}\n\nexport interface Subtask {\n  id: number;\n  title: string;\n  description: string;\n  details: string;\n  testStrategy: string;\n  status: string;\n  dependencies: number[];\n  parentTaskId: number;\n}\n\n// Context data structure\nexport interface ContextData {\n  tasks: Task[];\n  metadata: ContextMetadata;\n}\n\nexport interface ContextMetadata {\n  created: string;\n  updated: string;\n  description: string;\n}\n\n// Complete data structure\nexport interface TaskData {\n  [context: string]: ContextData;\n}\n\n// Application state interfaces\nexport interface AppState {\n  taskData: TaskData | null;\n  currentContext: string;\n  currentTaskIndex: number;\n  isAutoRefresh: boolean;\n  connectionStatus: 'live' | 'offline' | 'error';\n  selectedFile: string;\n}\n\n// Status and priority types\nexport type TaskStatus = 'pending' | 'in-progress' | 'done' | 'cancelled';\nexport type TaskPriority = 'high' | 'medium' | 'low';\n\n// Navigation history\nexport interface NavigationHistory {\n  taskIds: number[];\n  currentIndex: number;\n}\n```\n\nThese interfaces should be used throughout the application to ensure type safety and provide proper autocompletion in the IDE.",
        "testStrategy": "1. Validate the type definitions by creating test objects that conform to the interfaces\n2. Verify that TypeScript compiler catches type errors when properties are missing or of incorrect type\n3. Test the interfaces with sample JSON data to ensure compatibility\n4. Ensure that optional properties (like subtasks) are properly handled\n5. Verify that string literal types (like TaskStatus and TaskPriority) restrict values to the defined options",
        "priority": "high",
        "dependencies": [
          13
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Create Header Component with File Selection",
        "description": "Implement the application header component with file selection functionality, auto-refresh toggle, settings button, and connection status indicator.",
        "details": "Create a `components/Header.tsx` file with the following implementation:\n\n```tsx\n'use client';\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { FileIcon, RefreshCwIcon, SettingsIcon } from 'lucide-react';\n\ninterface HeaderProps {\n  selectedFile: string;\n  isAutoRefresh: boolean;\n  connectionStatus: 'live' | 'offline' | 'error';\n  onFileSelect: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onToggleAutoRefresh: () => void;\n  onOpenSettings: () => void;\n}\n\nconst Header: React.FC<HeaderProps> = ({\n  selectedFile,\n  isAutoRefresh,\n  connectionStatus,\n  onFileSelect,\n  onToggleAutoRefresh,\n  onOpenSettings,\n}) => {\n  // Function to get connection status badge content\n  const getConnectionBadge = () => {\n    const variants = {\n      live: '🔴 Live',\n      offline: '⚫ Offline',\n      error: '🟠 Error',\n    };\n    return variants[connectionStatus] || '⚫ Offline';\n  };\n\n  // Function to get connection status badge variant\n  const getConnectionVariant = () => {\n    const variants = {\n      live: 'success',\n      offline: 'secondary',\n      error: 'destructive',\n    };\n    return variants[connectionStatus] || 'secondary';\n  };\n\n  return (\n    <header className=\"border-b border-gray-700 bg-gray-800 p-4\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-green-400\">🎯 Task Execution Monitor</h1>\n        \n        <div className=\"flex items-center gap-4\">\n          {/* File Upload */}\n          <div>\n            <input\n              type=\"file\"\n              accept=\".json\"\n              onChange={onFileSelect}\n              className=\"hidden\"\n              id=\"file-upload\"\n            />\n            <Button\n              onClick={() => document.getElementById('file-upload')?.click()}\n              variant=\"default\"\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <FileIcon className=\"mr-2 h-4 w-4\" />\n              Select File\n            </Button>\n          </div>\n\n          {/* File Indicator */}\n          <span className=\"text-sm text-gray-400 max-w-[200px] truncate\">\n            {selectedFile}\n          </span>\n\n          {/* Auto Refresh Toggle */}\n          <Button\n            onClick={onToggleAutoRefresh}\n            variant={isAutoRefresh ? \"default\" : \"outline\"}\n            className={isAutoRefresh ? \"bg-green-600\" : \"\"}\n          >\n            <RefreshCwIcon className=\"mr-2 h-4 w-4\" />\n            {isAutoRefresh ? 'Auto 5s' : 'Off'}\n          </Button>\n\n          {/* Settings */}\n          <Button variant=\"outline\" onClick={onOpenSettings}>\n            <SettingsIcon className=\"h-4 w-4\" />\n          </Button>\n\n          {/* Connection Status */}\n          <Badge variant={getConnectionVariant()}>{getConnectionBadge()}</Badge>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n```\n\nThis component handles:\n1. File selection button that triggers a hidden file input\n2. Display of the currently selected file name\n3. Auto-refresh toggle button with visual indication of state\n4. Settings button\n5. Connection status badge that changes appearance based on status",
        "testStrategy": "1. Render the Header component with various prop combinations to verify appearance\n2. Test file selection by mocking the file input change event and verifying the callback is called\n3. Verify that clicking the auto-refresh button calls the toggle callback\n4. Test that the connection status badge displays the correct text and styling for each status\n5. Verify that the settings button calls the appropriate callback when clicked\n6. Test responsive design by rendering at different viewport sizes",
        "priority": "high",
        "dependencies": [
          13,
          14
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Implement Task Navigation Bar Component",
        "description": "Create the task navigation bar component with previous/next navigation, task selector dropdown, and search functionality.",
        "details": "Create a `components/TaskNavigationBar.tsx` file with the following implementation:\n\n```tsx\n'use client';\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Task } from '@/types';\n\ninterface TaskNavigationBarProps {\n  tasks: Task[];\n  currentTaskIndex: number;\n  onTaskSelect: (index: number) => void;\n  onSearch: (query: string) => void;\n}\n\nconst TaskNavigationBar: React.FC<TaskNavigationBarProps> = ({\n  tasks,\n  currentTaskIndex,\n  onTaskSelect,\n  onSearch,\n}) => {\n  // Handle search input changes\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearch(e.target.value);\n  };\n\n  return (\n    <div className=\"border-b border-gray-700 bg-gray-800 p-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          {/* Previous/Next */}\n          <Button\n            onClick={() => onTaskSelect(Math.max(0, currentTaskIndex - 1))}\n            disabled={currentTaskIndex === 0 || tasks.length === 0}\n            variant=\"outline\"\n          >\n            ◀️ Prev\n          </Button>\n\n          {/* Task Selector */}\n          <Select\n            value={tasks.length > 0 ? currentTaskIndex.toString() : ''}\n            onValueChange={(value) => onTaskSelect(parseInt(value))}\n            disabled={tasks.length === 0}\n          >\n            <SelectTrigger className=\"w-[300px]\">\n              <SelectValue placeholder=\"Select a task\" />\n            </SelectTrigger>\n            <SelectContent>\n              {tasks.map((task, index) => (\n                <SelectItem key={task.id} value={index.toString()}>\n                  Task {task.id}: {task.title.length > 40 ? `${task.title.substring(0, 40)}...` : task.title}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Button\n            onClick={() => onTaskSelect(Math.min(tasks.length - 1, currentTaskIndex + 1))}\n            disabled={currentTaskIndex >= tasks.length - 1 || tasks.length === 0}\n            variant=\"outline\"\n          >\n            ▶️ Next\n          </Button>\n        </div>\n\n        {/* Search */}\n        <Input\n          placeholder=\"🔍 Search tasks...\"\n          className=\"w-[200px]\"\n          onChange={handleSearchChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default TaskNavigationBar;\n```\n\nThis component provides:\n1. Previous and next buttons for sequential task navigation\n2. A dropdown selector for direct task selection\n3. A search input for filtering tasks\n4. Proper handling of edge cases (empty task list, first/last task)",
        "testStrategy": "1. Render the component with a sample task list and verify the dropdown contains all tasks\n2. Test previous/next navigation by clicking buttons and verifying the correct callback is called\n3. Verify that the previous button is disabled when on the first task\n4. Verify that the next button is disabled when on the last task\n5. Test search functionality by entering text and verifying the search callback is called with the correct query\n6. Test with an empty task list to ensure proper handling of this edge case\n7. Verify dropdown selection works by selecting different options and checking the callback",
        "priority": "high",
        "dependencies": [
          13,
          14
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Create Context Selector Component",
        "description": "Implement the context selector component that allows users to switch between different task contexts (e.g., master, coverage).",
        "details": "Create a `components/ContextSelector.tsx` file with the following implementation:\n\n```tsx\n'use client';\n\nimport React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { TaskData } from '@/types';\n\ninterface ContextSelectorProps {\n  taskData: TaskData | null;\n  currentContext: string;\n  onContextSelect: (context: string) => void;\n}\n\nconst ContextSelector: React.FC<ContextSelectorProps> = ({\n  taskData,\n  currentContext,\n  onContextSelect,\n}) => {\n  if (!taskData) {\n    return null;\n  }\n\n  // Get available contexts\n  const contexts = Object.keys(taskData);\n\n  // Calculate stats for each context\n  const getContextStats = (contextName: string) => {\n    const contextData = taskData[contextName];\n    const tasks = contextData.tasks;\n    const totalTasks = tasks.length;\n    const completedTasks = tasks.filter(task => task.status === 'done').length;\n    const activeTasks = tasks.filter(task => task.status === 'in-progress').length;\n    const progress = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;\n    \n    return {\n      totalTasks,\n      completedTasks,\n      activeTasks,\n      progress,\n      description: contextData.metadata.description,\n      updated: new Date(contextData.metadata.updated).toLocaleString(),\n    };\n  };\n\n  // Get icon for context\n  const getContextIcon = (contextName: string) => {\n    const icons = {\n      master: '📂',\n      coverage: '🟡',\n      default: '📋',\n    };\n    return icons[contextName] || icons.default;\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4 bg-gray-900\">\n      {contexts.map(contextName => {\n        const stats = getContextStats(contextName);\n        const isActive = contextName === currentContext;\n        \n        return (\n          <Card \n            key={contextName}\n            className={`cursor-pointer hover:bg-gray-700 transition-colors ${isActive ? 'bg-gray-700 border-green-500' : 'bg-gray-800'}`}\n            onClick={() => onContextSelect(contextName)}\n          >\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"text-lg font-medium\">\n                  {getContextIcon(contextName)} {contextName.charAt(0).toUpperCase() + contextName.slice(1)} Context\n                </h3>\n                {isActive && (\n                  <span className=\"text-xs bg-green-600 text-white px-2 py-1 rounded\">Active</span>\n                )}\n              </div>\n              \n              <Progress value={stats.progress} className=\"h-2 mb-2\" />\n              \n              <div className=\"text-sm text-gray-400\">\n                <span>{stats.completedTasks}/{stats.totalTasks} tasks</span>\n                {stats.activeTasks > 0 && (\n                  <span className=\"ml-2\">• {stats.activeTasks} active</span>\n                )}\n              </div>\n              \n              {stats.description && (\n                <p className=\"text-xs text-gray-500 mt-2 truncate\">{stats.description}</p>\n              )}\n              \n              <div className=\"text-xs text-gray-500 mt-2\">\n                Updated: {stats.updated}\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ContextSelector;\n```\n\nThis component:\n1. Displays cards for each available context in the task data\n2. Shows progress information (completed/total tasks)\n3. Highlights the currently active context\n4. Provides visual indicators of task status within each context\n5. Displays metadata like description and last updated time",
        "testStrategy": "1. Render the component with sample task data containing multiple contexts\n2. Verify that all contexts are displayed as cards\n3. Test context selection by clicking on cards and verifying the callback is called with the correct context name\n4. Verify that the active context is visually highlighted\n5. Test progress calculation by providing contexts with different completion rates\n6. Verify that the component handles edge cases like empty contexts or missing metadata\n7. Test with null task data to ensure the component doesn't render in this case",
        "priority": "medium",
        "dependencies": [
          13,
          14
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Implement Task Panel Component",
        "description": "Create the main task panel component that displays detailed information about the currently selected task, including title, description, implementation details, and test strategy.",
        "details": "Create a `components/TaskPanel.tsx` file with the following implementation:\n\n```tsx\n'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Task } from '@/types';\n\ninterface TaskPanelProps {\n  task?: Task;\n}\n\nconst TaskPanel: React.FC<TaskPanelProps> = ({ task }) => {\n  if (!task) {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <h2 className=\"text-xl font-bold mb-2\">⏸️ No Active Task</h2>\n          <p className=\"text-gray-400\">Please select a task to view details</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Get appropriate status badge color\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, string> = {\n      'done': 'bg-blue-500 hover:bg-blue-600',\n      'in-progress': 'bg-green-500 hover:bg-green-600',\n      'pending': 'bg-yellow-500 hover:bg-yellow-600',\n      'cancelled': 'bg-red-500 hover:bg-red-600'\n    };\n    return variants[status.toLowerCase()] || 'bg-gray-500 hover:bg-gray-600';\n  };\n\n  // Get priority badge color\n  const getPriorityBadge = (priority: string) => {\n    const variants: Record<string, string> = {\n      'high': 'bg-red-500 hover:bg-red-600',\n      'medium': 'bg-yellow-500 hover:bg-yellow-600',\n      'low': 'bg-blue-500 hover:bg-blue-600'\n    };\n    return variants[priority.toLowerCase()] || 'bg-gray-500 hover:bg-gray-600';\n  };\n\n  // Calculate progress if task has subtasks\n  const completedSubtasks = task.subtasks?.filter(s => s.status === 'done').length || 0;\n  const totalSubtasks = task.subtasks?.length || 0;\n  const progress = totalSubtasks > 0 ? (completedSubtasks / totalSubtasks) * 100 : (task.progress || 0);\n\n  // Format markdown-like content for display\n  const formatContent = (content: string) => {\n    // Simple markdown-like formatting\n    return content\n      .replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>')\n      .replace(/\\*(.+?)\\*/g, '<em>$1</em>')\n      .replace(/```([\\s\\S]+?)```/g, '<pre class=\"bg-gray-900 p-3 rounded my-2 overflow-x-auto\">$1</pre>')\n      .replace(/`([^`]+)`/g, '<code class=\"bg-gray-900 px-1 rounded\">$1</code>')\n      .split('\\n').map((line, i) => {\n        // Handle headers\n        if (line.startsWith('# ')) {\n          return `<h1 class=\"text-xl font-bold my-2\">${line.substring(2)}</h1>`;\n        }\n        if (line.startsWith('## ')) {\n          return `<h2 class=\"text-lg font-bold my-2\">${line.substring(3)}</h2>`;\n        }\n        if (line.startsWith('### ')) {\n          return `<h3 class=\"text-md font-bold my-2\">${line.substring(4)}</h3>`;\n        }\n        // Handle lists\n        if (line.match(/^\\d+\\.\\s/)) {\n          return `<div class=\"ml-4\">• ${line.replace(/^\\d+\\.\\s/, '')}</div>`;\n        }\n        if (line.startsWith('- ')) {\n          return `<div class=\"ml-4\">• ${line.substring(2)}</div>`;\n        }\n        return line ? `<div>${line}</div>` : '<div>&nbsp;</div>';\n      }).join('');\n  };\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-xl\">\n            🎯 Task {task.id}: {task.title}\n          </CardTitle>\n          <div className=\"flex gap-2\">\n            <Badge className={getPriorityBadge(task.priority)}>\n              {task.priority.toUpperCase()}\n            </Badge>\n            <Badge className={getStatusBadge(task.status)}>\n              {task.status.toUpperCase()}\n            </Badge>\n          </div>\n        </div>\n        \n        {(totalSubtasks > 0 || task.progress) && (\n          <div className=\"space-y-2 mt-4\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Progress</span>\n              {totalSubtasks > 0 ? (\n                <span>{completedSubtasks}/{totalSubtasks} subtasks</span>\n              ) : (\n                <span>{Math.round(progress)}%</span>\n              )}\n            </div>\n            <Progress value={progress} className=\"h-2\" />\n          </div>\n        )}\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* Description */}\n        <div>\n          <h4 className=\"font-semibold text-gray-300 uppercase text-sm mb-2\">📋 Description</h4>\n          <div className=\"text-gray-200 leading-relaxed\">\n            <div dangerouslySetInnerHTML={{ __html: formatContent(task.description) }} />\n          </div>\n        </div>\n\n        {/* Implementation Details */}\n        <div>\n          <h4 className=\"font-semibold text-gray-300 uppercase text-sm mb-2\">📜 Implementation Details</h4>\n          <div className=\"bg-gray-800 p-4 rounded-lg\">\n            <div \n              className=\"text-sm text-gray-300 whitespace-pre-wrap\"\n              dangerouslySetInnerHTML={{ __html: formatContent(task.details) }}\n            />\n          </div>\n        </div>\n\n        {/* Test Strategy */}\n        <div>\n          <h4 className=\"font-semibold text-gray-300 uppercase text-sm mb-2\">🧪 Test Strategy</h4>\n          <div className=\"bg-gray-800 p-4 rounded-lg\">\n            <div \n              className=\"text-sm text-gray-300 whitespace-pre-wrap\"\n              dangerouslySetInnerHTML={{ __html: formatContent(task.testStrategy) }}\n            />\n          </div>\n        </div>\n\n        {/* Dependencies */}\n        {task.dependencies && task.dependencies.length > 0 && (\n          <div>\n            <h4 className=\"font-semibold text-gray-300 uppercase text-sm mb-2\">🔗 Dependencies</h4>\n            <div className=\"bg-gray-800 p-4 rounded-lg\">\n              <div className=\"text-sm text-gray-300\">\n                This task depends on: {task.dependencies.map(dep => (\n                  <Badge key={dep} variant=\"outline\" className=\"ml-1\">Task {dep}</Badge>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TaskPanel;\n```\n\nThis component:\n1. Displays comprehensive information about the selected task\n2. Shows status and priority badges with appropriate colors\n3. Displays a progress bar for tasks with subtasks or explicit progress\n4. Formats task content with basic markdown-like rendering\n5. Shows dependencies as badges\n6. Handles the case when no task is selected",
        "testStrategy": "1. Render the component with a sample task and verify all sections are displayed correctly\n2. Test with different task statuses and priorities to verify badge colors change appropriately\n3. Verify progress calculation works correctly for tasks with subtasks\n4. Test the markdown formatting function with various input patterns\n5. Verify that dependencies are displayed correctly when present\n6. Test with undefined task to ensure the empty state is displayed\n7. Verify that HTML is properly sanitized when using dangerouslySetInnerHTML\n8. Test with tasks containing code blocks and other formatting to ensure proper display",
        "priority": "high",
        "dependencies": [
          13,
          14
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Implement Navigation Sidebar Component",
        "description": "Create the navigation sidebar component that displays the task hierarchy, dependencies, and dependents for the currently selected task.",
        "details": "Create a `components/NavigationSidebar.tsx` file with the following implementation:\n\n```tsx\n'use client';\n\nimport React from 'react';\nimport { Task } from '@/types';\n\ninterface NavigationSidebarProps {\n  tasks: Task[];\n  currentTaskIndex: number;\n  onTaskSelect: (index: number) => void;\n}\n\nconst NavigationSidebar: React.FC<NavigationSidebarProps> = ({\n  tasks,\n  currentTaskIndex,\n  onTaskSelect,\n}) => {\n  if (tasks.length === 0) {\n    return (\n      <div className=\"p-4 text-gray-400\">\n        No tasks available. Please select a JSON file to view tasks.\n      </div>\n    );\n  }\n\n  const currentTask = tasks[currentTaskIndex];\n  \n  // Find parent task if current task is a subtask\n  const findParentTask = () => {\n    // This would be implemented if we had a parent-child relationship in our data model\n    // For now, we'll just return the current task\n    return currentTask;\n  };\n  \n  // Get task dependencies\n  const getDependencies = () => {\n    if (!currentTask.dependencies || currentTask.dependencies.length === 0) {\n      return [];\n    }\n    \n    return currentTask.dependencies.map(depId => {\n      const depTask = tasks.find(t => t.id === depId);\n      return {\n        id: depId,\n        title: depTask?.title || `Unknown Task (ID: ${depId})`,\n        status: depTask?.status || 'unknown',\n        index: tasks.findIndex(t => t.id === depId)\n      };\n    });\n  };\n  \n  // Get tasks that depend on the current task\n  const getDependents = () => {\n    return tasks\n      .filter(task => task.dependencies?.includes(currentTask.id))\n      .map(task => ({\n        id: task.id,\n        title: task.title,\n        status: task.status,\n        index: tasks.findIndex(t => t.id === task.id)\n      }));\n  };\n  \n  // Get status icon\n  const getStatusIcon = (status: string) => {\n    const icons: Record<string, string> = {\n      'done': '✅',\n      'in-progress': '🟡',\n      'pending': '⏳',\n      'cancelled': '❌',\n      'unknown': '❓'\n    };\n    return icons[status.toLowerCase()] || icons.unknown;\n  };\n  \n  // Find related tasks (tasks in the same group)\n  const getRelatedTasks = () => {\n    // This is a simplified implementation\n    // In a real app, you might group tasks by feature, component, etc.\n    const currentId = currentTask.id;\n    const prefix = String(currentId).split('.')[0];\n    \n    return tasks\n      .filter(task => {\n        const taskId = String(task.id);\n        return taskId.startsWith(prefix) && taskId !== String(currentId);\n      })\n      .map(task => ({\n        id: task.id,\n        title: task.title,\n        status: task.status,\n        index: tasks.findIndex(t => t.id === task.id)\n      }));\n  };\n  \n  const dependencies = getDependencies();\n  const dependents = getDependents();\n  const relatedTasks = getRelatedTasks();\n  const parentTask = findParentTask();\n  \n  // Render a task item with status icon\n  const renderTaskItem = (task: { id: number, title: string, status: string, index: number }) => (\n    <div \n      key={task.id}\n      className=\"flex items-center p-2 hover:bg-gray-700 rounded cursor-pointer\"\n      onClick={() => task.index >= 0 ? onTaskSelect(task.index) : null}\n    >\n      <span className=\"mr-2\">{getStatusIcon(task.status)}</span>\n      <span className=\"truncate\">\n        Task {task.id}: {task.title.length > 30 ? `${task.title.substring(0, 30)}...` : task.title}\n      </span>\n    </div>\n  );\n\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      <div className=\"p-4\">\n        <h3 className=\"text-lg font-medium mb-4\">📂 TASK HIERARCHY</h3>\n        \n        {/* Current Task */}\n        <div className=\"mb-6\">\n          <div className=\"text-sm text-gray-400 mb-1\">CURRENT TASK</div>\n          <div className=\"bg-gray-700 p-2 rounded\">\n            <div className=\"flex items-center\">\n              <span className=\"mr-2\">{getStatusIcon(currentTask.status)}</span>\n              <span className=\"font-medium\">\n                Task {currentTask.id}: {currentTask.title.length > 25 ? `${currentTask.title.substring(0, 25)}...` : currentTask.title}\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        {/* Dependencies */}\n        {dependencies.length > 0 && (\n          <div className=\"mb-6\">\n            <div className=\"text-sm text-gray-400 mb-1\">🔗 DEPENDENCIES</div>\n            <div className=\"bg-gray-800 rounded\">\n              {dependencies.map(renderTaskItem)}\n            </div>\n          </div>\n        )}\n        \n        {/* Dependents */}\n        {dependents.length > 0 && (\n          <div className=\"mb-6\">\n            <div className=\"text-sm text-gray-400 mb-1\">⏭️ DEPENDENTS</div>\n            <div className=\"bg-gray-800 rounded\">\n              {dependents.map(renderTaskItem)}\n            </div>\n          </div>\n        )}\n        \n        {/* Related Tasks */}\n        {relatedTasks.length > 0 && (\n          <div className=\"mb-6\">\n            <div className=\"text-sm text-gray-400 mb-1\">🔄 RELATED TASKS</div>\n            <div className=\"bg-gray-800 rounded\">\n              {relatedTasks.map(renderTaskItem)}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NavigationSidebar;\n```\n\nThis component:\n1. Displays the current task with visual highlighting\n2. Shows dependencies of the current task with status indicators\n3. Shows tasks that depend on the current task (dependents)\n4. Displays related tasks based on ID patterns\n5. Provides navigation by clicking on any task\n6. Uses status icons to indicate task status",
        "testStrategy": "1. Render the component with a sample task list and verify the current task is displayed\n2. Test dependency detection by providing tasks with various dependency relationships\n3. Verify that clicking on a task calls the selection callback with the correct index\n4. Test with tasks having no dependencies or dependents\n5. Verify status icons are displayed correctly for different task statuses\n6. Test the related tasks functionality with tasks having similar IDs\n7. Verify the component handles an empty task list gracefully",
        "priority": "high",
        "dependencies": [
          13,
          14
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Implement API Routes for Task Data and File Upload",
        "description": "Create Next.js API routes for handling task data retrieval and JSON file uploads.",
        "details": "Create two API route files:\n\n1. First, create `pages/api/tasks.ts` for retrieving task data:\n\n```typescript\n// pages/api/tasks.ts\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport fs from 'fs';\nimport path from 'path';\n\ntype ResponseData = {\n  message?: string;\n  data?: any;\n};\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  try {\n    // Create uploads directory if it doesn't exist\n    const uploadsDir = path.join(process.cwd(), 'uploads');\n    if (!fs.existsSync(uploadsDir)) {\n      fs.mkdirSync(uploadsDir, { recursive: true });\n    }\n    \n    const filePath = path.join(process.cwd(), 'uploads', 'tasks.json');\n    \n    if (!fs.existsSync(filePath)) {\n      return res.status(404).json({ message: 'No tasks file found' });\n    }\n    \n    const content = fs.readFileSync(filePath, 'utf8');\n    const data = JSON.parse(content);\n    \n    res.status(200).json({ data });\n  } catch (error) {\n    console.error('Error reading tasks file:', error);\n    res.status(500).json({ message: 'Error reading tasks file' });\n  }\n}\n```\n\n2. Then, create `pages/api/upload.ts` for handling file uploads:\n\n```typescript\n// pages/api/upload.ts\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport { IncomingForm } from 'formidable';\nimport fs from 'fs';\nimport path from 'path';\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\ntype ResponseData = {\n  message: string;\n};\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    // Create uploads directory if it doesn't exist\n    const uploadsDir = path.join(process.cwd(), 'uploads');\n    if (!fs.existsSync(uploadsDir)) {\n      fs.mkdirSync(uploadsDir, { recursive: true });\n    }\n\n    const form = new IncomingForm({\n      uploadDir: uploadsDir,\n      keepExtensions: true,\n    });\n\n    form.parse(req, async (err, fields, files) => {\n      if (err) {\n        return res.status(500).json({ message: 'Error parsing form data' });\n      }\n\n      try {\n        const file = files.tasks[0];\n        \n        // Validate JSON\n        const content = fs.readFileSync(file.filepath, 'utf8');\n        JSON.parse(content); // Will throw if invalid\n        \n        // Save with standard name\n        const finalPath = path.join(uploadsDir, 'tasks.json');\n        fs.copyFileSync(file.filepath, finalPath);\n        fs.unlinkSync(file.filepath); // Clean up temp file\n        \n        res.status(200).json({ message: 'File uploaded successfully' });\n      } catch (error) {\n        console.error('Error processing uploaded file:', error);\n        res.status(400).json({ message: 'Invalid JSON file' });\n      }\n    });\n  } catch (error) {\n    console.error('Error handling upload:', error);\n    res.status(500).json({ message: 'Server error' });\n  }\n}\n```\n\nThese API routes handle:\n1. Reading the tasks.json file from the uploads directory\n2. Uploading and validating a JSON file\n3. Storing the uploaded file with a standard name\n4. Error handling for various scenarios\n5. Creating the uploads directory if it doesn't exist",
        "testStrategy": "1. Test the tasks API by making GET requests and verifying the response format\n2. Test with no file present to verify 404 handling\n3. Test with invalid JSON to verify error handling\n4. Test the upload API by sending POST requests with valid JSON files\n5. Verify that the uploaded file is stored correctly\n6. Test with invalid JSON to verify validation\n7. Test with non-POST methods to verify method restriction\n8. Verify directory creation works when uploads directory doesn't exist",
        "priority": "high",
        "dependencies": [
          13,
          14
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Create Main TaskMonitor Component",
        "description": "Implement the main TaskMonitor component that integrates all the previously created components and manages application state.",
        "details": "Create a `components/TaskMonitor.tsx` file with the following implementation:\n\n```tsx\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport TaskNavigationBar from './TaskNavigationBar';\nimport ContextSelector from './ContextSelector';\nimport TaskPanel from './TaskPanel';\nimport NavigationSidebar from './NavigationSidebar';\nimport { TaskData } from '@/types';\n\nconst TaskMonitor: React.FC = () => {\n  // Application state\n  const [taskData, setTaskData] = useState<TaskData | null>(null);\n  const [currentContext, setCurrentContext] = useState<string>('master'); // Default context\n  const [currentTaskIndex, setCurrentTaskIndex] = useState<number>(0);\n  const [isAutoRefresh, setIsAutoRefresh] = useState<boolean>(true);\n  const [connectionStatus, setConnectionStatus] = useState<'live' | 'offline' | 'error'>('offline');\n  const [selectedFile, setSelectedFile] = useState<string>('No file selected');\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [filteredTasks, setFilteredTasks] = useState<any[]>([]);\n\n  // Get current tasks based on context\n  const getCurrentTasks = () => {\n    if (!taskData || !taskData[currentContext]) {\n      return [];\n    }\n    \n    const tasks = taskData[currentContext].tasks;\n    \n    if (!searchQuery) {\n      return tasks;\n    }\n    \n    // Filter tasks based on search query\n    return tasks.filter(task => \n      task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      task.description.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  };\n\n  // Effect for auto-refresh\n  useEffect(() => {\n    if (!isAutoRefresh) return;\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/api/tasks');\n        if (response.ok) {\n          const result = await response.json();\n          setTaskData(result.data);\n          setConnectionStatus('live');\n        } else if (response.status === 404) {\n          setConnectionStatus('offline');\n        } else {\n          setConnectionStatus('error');\n        }\n      } catch (error) {\n        console.error('Error fetching task data:', error);\n        setConnectionStatus('error');\n      }\n    };\n\n    // Initial fetch\n    fetchData();\n\n    // Set up polling interval\n    const interval = setInterval(fetchData, 5000);\n\n    return () => clearInterval(interval);\n  }, [isAutoRefresh]);\n\n  // Effect for search filtering\n  useEffect(() => {\n    setFilteredTasks(getCurrentTasks());\n  }, [searchQuery, taskData, currentContext]);\n\n  // Handle file upload\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append('tasks', file);\n\n    try {\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        setSelectedFile(file.name);\n        setConnectionStatus('live');\n        \n        // Immediately fetch the uploaded data\n        const tasksResponse = await fetch('/api/tasks');\n        if (tasksResponse.ok) {\n          const result = await tasksResponse.json();\n          setTaskData(result.data);\n          \n          // Reset to first task in the default context\n          if (result.data && Object.keys(result.data).length > 0) {\n            const firstContext = Object.keys(result.data)[0];\n            setCurrentContext(firstContext);\n            setCurrentTaskIndex(0);\n          }\n        }\n      } else {\n        setConnectionStatus('error');\n        alert('Error uploading file. Please ensure it\\'s a valid JSON file.');\n      }\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setConnectionStatus('error');\n      alert('Error uploading file.');\n    }\n  };\n\n  // Toggle auto-refresh\n  const toggleAutoRefresh = () => {\n    setIsAutoRefresh(!isAutoRefresh);\n  };\n\n  // Handle context selection\n  const handleContextSelect = (context: string) => {\n    setCurrentContext(context);\n    setCurrentTaskIndex(0); // Reset to first task in the new context\n  };\n\n  // Handle search\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  // Handle settings\n  const handleOpenSettings = () => {\n    alert('Settings functionality would be implemented here.');\n  };\n\n  // Get current tasks\n  const currentTasks = filteredTasks;\n  const currentTask = currentTasks[currentTaskIndex];\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-gray-100 flex flex-col\">\n      {/* Header */}\n      <Header\n        selectedFile={selectedFile}\n        isAutoRefresh={isAutoRefresh}\n        connectionStatus={connectionStatus}\n        onFileSelect={handleFileUpload}\n        onToggleAutoRefresh={toggleAutoRefresh}\n        onOpenSettings={handleOpenSettings}\n      />\n\n      {/* Context Selector */}\n      <ContextSelector\n        taskData={taskData}\n        currentContext={currentContext}\n        onContextSelect={handleContextSelect}\n      />\n\n      {/* Task Navigation */}\n      <TaskNavigationBar\n        tasks={currentTasks}\n        currentTaskIndex={currentTaskIndex}\n        onTaskSelect={setCurrentTaskIndex}\n        onSearch={handleSearch}\n      />\n\n      {/* Main Content */}\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Main Panel */}\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          <TaskPanel task={currentTask} />\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"w-80 border-l border-gray-700 bg-gray-800 overflow-y-auto\">\n          <NavigationSidebar\n            tasks={taskData?.[currentContext]?.tasks || []}\n            currentTaskIndex={currentTaskIndex}\n            onTaskSelect={setCurrentTaskIndex}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskMonitor;\n```\n\nThis component:\n1. Integrates all previously created components\n2. Manages application state (task data, current context, current task, etc.)\n3. Implements auto-refresh functionality with 5-second polling\n4. Handles file uploads and processes the response\n5. Implements search functionality\n6. Manages context switching\n7. Provides proper data flow between components",
        "testStrategy": "1. Render the component and verify that all child components are rendered\n2. Test auto-refresh functionality by mocking the fetch API and verifying polling behavior\n3. Test file upload by mocking the upload API and verifying state updates\n4. Verify context switching by selecting different contexts and checking state updates\n5. Test search functionality by entering search queries and verifying filtered results\n6. Verify task selection by selecting different tasks and checking state updates\n7. Test error handling by simulating API errors and verifying error state\n8. Verify that the component handles the case when no file is selected",
        "priority": "high",
        "dependencies": [
          15,
          16,
          17,
          18,
          19,
          20
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "Create Home Page and App Component",
        "description": "Implement the main page and app component to render the TaskMonitor component.",
        "details": "Create two files:\n\n1. First, create or update `pages/index.tsx` as the main page:\n\n```tsx\nimport TaskMonitor from '@/components/TaskMonitor';\n\nexport default function Home() {\n  return (\n    <main>\n      <TaskMonitor />\n    </main>\n  );\n}\n```\n\n2. Then, create or update `pages/_app.tsx` for global styles and configuration:\n\n```tsx\nimport '@/styles/globals.css';\nimport type { AppProps } from 'next/app';\nimport Head from 'next/head';\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return (\n    <>\n      <Head>\n        <title>Task Execution Monitor</title>\n        <meta name=\"description\" content=\"Real-time task monitoring interface\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <Component {...pageProps} />\n    </>\n  );\n}\n```\n\nThese files:\n1. Set up the main page to render the TaskMonitor component\n2. Configure the app with proper metadata and global styles\n3. Provide a clean entry point to the application",
        "testStrategy": "1. Render the Home component and verify that the TaskMonitor component is rendered\n2. Check that the App component properly passes props to the child component\n3. Verify that the Head component contains the correct metadata\n4. Test that global styles are properly applied\n5. Verify that the viewport meta tag is set correctly for responsive design",
        "priority": "medium",
        "dependencies": [
          21
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Implement Sample JSON Data Structure",
        "description": "Create a sample JSON data structure that matches the expected format for the Task Execution Monitor.",
        "details": "Create a sample JSON file that can be used for testing the application. This file should follow the structure defined in the TypeScript interfaces.\n\n```json\n{\n  \"master\": {\n    \"tasks\": [\n      {\n        \"id\": 1,\n        \"title\": \"Setup Project Repository\",\n        \"description\": \"Initialize the project repository with basic configuration and documentation.\",\n        \"details\": \"**Steps:**\\n1. Create a new repository on GitHub\\n2. Initialize with README.md, .gitignore, and LICENSE\\n3. Set up branch protection rules\\n4. Configure issue templates\\n5. Add project documentation\",\n        \"testStrategy\": \"Verify repository setup by checking:\\n- Branch protection rules are in place\\n- Documentation is complete\\n- Issue templates are working\",\n        \"status\": \"done\",\n        \"priority\": \"high\",\n        \"dependencies\": [],\n        \"subtasks\": [\n          {\n            \"id\": 1,\n            \"title\": \"Create GitHub Repository\",\n            \"description\": \"Set up the initial GitHub repository with basic files.\",\n            \"details\": \"Create repository with README.md, .gitignore for Go, and MIT license.\",\n            \"testStrategy\": \"Verify repository exists and contains initial files.\",\n            \"status\": \"done\",\n            \"dependencies\": [],\n            \"parentTaskId\": 1\n          },\n          {\n            \"id\": 2,\n            \"title\": \"Configure Branch Protection\",\n            \"description\": \"Set up branch protection rules for the main branch.\",\n            \"details\": \"Configure rules requiring pull request reviews and status checks before merging.\",\n            \"testStrategy\": \"Attempt to push directly to main branch and verify it's blocked.\",\n            \"status\": \"done\",\n            \"dependencies\": [1],\n            \"parentTaskId\": 1\n          }\n        ]\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Implement Core Data Structures\",\n        \"description\": \"Design and implement the core data structures for the application.\",\n        \"details\": \"**Implementation Details:**\\n- Create Task struct with all required fields\\n- Implement TaskList container with efficient lookup\\n- Add serialization/deserialization support\\n- Include validation logic\",\n        \"testStrategy\": \"**Test Cases:**\\n1. Unit tests for Task creation and validation\\n2. Serialization/deserialization tests\\n3. Performance tests for large task lists\",\n        \"status\": \"in-progress\",\n        \"priority\": \"high\",\n        \"dependencies\": [1],\n        \"progress\": 65\n      },\n      {\n        \"id\": 3,\n        \"title\": \"Create UI Components\",\n        \"description\": \"Develop the core UI components for the task monitoring interface.\",\n        \"details\": \"**Components to Create:**\\n- TaskView component for displaying task details\\n- TaskList component for showing all tasks\\n- StatusBadge component for task status\\n- ProgressBar component for completion tracking\",\n        \"testStrategy\": \"**Testing Approach:**\\n- Unit tests for each component\\n- Integration tests for component interaction\\n- Visual regression tests for UI appearance\",\n        \"status\": \"pending\",\n        \"priority\": \"medium\",\n        \"dependencies\": [2]\n      }\n    ],\n    \"metadata\": {\n      \"created\": \"2023-11-01T10:00:00.000Z\",\n      \"updated\": \"2023-11-05T15:30:00.000Z\",\n      \"description\": \"Master task list for the Task Execution Monitor project\"\n    }\n  },\n  \"coverage\": {\n    \"tasks\": [\n      {\n        \"id\": 1,\n        \"title\": \"Implement Test Coverage Reporting\",\n        \"description\": \"Add test coverage reporting to the CI pipeline.\",\n        \"details\": \"**Implementation Steps:**\\n1. Configure go-cover for coverage analysis\\n2. Add coverage reporting to CI workflow\\n3. Set up coverage thresholds\\n4. Generate coverage badges\",\n        \"testStrategy\": \"Verify coverage reports are generated correctly and thresholds are enforced.\",\n        \"status\": \"done\",\n        \"priority\": \"high\",\n        \"dependencies\": []\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Increase Test Coverage for Core Modules\",\n        \"description\": \"Write additional tests to increase coverage for core modules.\",\n        \"details\": \"**Target Modules:**\\n- Task data structures (target: 90%)\\n- File parsing logic (target: 85%)\\n- UI components (target: 75%)\",\n        \"testStrategy\": \"Track coverage metrics before and after to verify improvement.\",\n        \"status\": \"in-progress\",\n        \"priority\": \"medium\",\n        \"dependencies\": [1],\n        \"progress\": 40\n      },\n      {\n        \"id\": 3,\n        \"title\": \"Document Security Vulnerabilities\",\n        \"description\": \"Analyze and document all security functions with 0% coverage.\",\n        \"details\": \"Use go-cover v1.4+ to generate detailed coverage reports. Document all functions in audit.go, metrics.go with 0% coverage. Create security risk matrix.\",\n        \"testStrategy\": \"Validate documentation accuracy by cross-referencing with actual coverage reports.\",\n        \"status\": \"pending\",\n        \"priority\": \"high\",\n        \"dependencies\": [1],\n        \"subtasks\": [\n          {\n            \"id\": 1,\n            \"title\": \"Generate Reports\",\n            \"description\": \"Generate detailed coverage reports for security-related code.\",\n            \"details\": \"Run go-cover with detailed output options and focus on security modules.\",\n            \"testStrategy\": \"Verify reports contain all security-related functions.\",\n            \"status\": \"done\",\n            \"dependencies\": [],\n            \"parentTaskId\": 3\n          },\n          {\n            \"id\": 2,\n            \"title\": \"Identify Functions\",\n            \"description\": \"Identify all functions with 0% coverage in security modules.\",\n            \"details\": \"Parse coverage reports and extract functions with no coverage.\",\n            \"testStrategy\": \"Cross-check identified functions with source code.\",\n            \"status\": \"done\",\n            \"dependencies\": [1],\n            \"parentTaskId\": 3\n          },\n          {\n            \"id\": 3,\n            \"title\": \"Map Risks\",\n            \"description\": \"Create risk matrix mapping uncovered functions to potential vulnerabilities.\",\n            \"details\": \"Analyze each uncovered function and assess potential security impact.\",\n            \"testStrategy\": \"Review risk matrix with security team.\",\n            \"status\": \"in-progress\",\n            \"dependencies\": [2],\n            \"parentTaskId\": 3\n          },\n          {\n            \"id\": 4,\n            \"title\": \"Compile Report\",\n            \"description\": \"Create comprehensive security coverage report.\",\n            \"details\": \"Compile findings into a detailed report with recommendations.\",\n            \"testStrategy\": \"Validate report against security best practices.\",\n            \"status\": \"pending\",\n            \"dependencies\": [3],\n            \"parentTaskId\": 3\n          }\n        ]\n      }\n    ],\n    \"metadata\": {\n      \"created\": \"2023-11-02T09:00:00.000Z\",\n      \"updated\": \"2023-11-06T11:45:00.000Z\",\n      \"description\": \"Test coverage improvement tasks for the project\"\n    }\n  }\n}\n```\n\nThis sample data includes:\n1. Two contexts: \"master\" and \"coverage\"\n2. Tasks with various statuses, priorities, and dependencies\n3. Tasks with subtasks to demonstrate hierarchy\n4. Tasks with progress indicators\n5. Metadata for each context\n6. Realistic task descriptions and details\n\nThis sample can be used for testing the application and as a reference for users creating their own task data files.",
        "testStrategy": "1. Validate the JSON structure against the TypeScript interfaces\n2. Verify that the JSON is properly formatted and parseable\n3. Test loading the sample data into the application\n4. Verify that all task properties are displayed correctly\n5. Test navigation between tasks and contexts using the sample data\n6. Verify that dependencies are correctly represented\n7. Test filtering and search using the sample data",
        "priority": "medium",
        "dependencies": [
          14
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Add Documentation and Deployment Instructions",
        "description": "Create comprehensive documentation for the application, including setup, usage, and deployment instructions.",
        "details": "Create a detailed README.md file with the following sections:\n\n```markdown\n# Task Execution Monitor\n\nA real-time task monitoring interface for tracking individual task execution with deep-dive capabilities, live logging, and performance metrics.\n\n## Features\n\n- **File-Based Task Monitoring**: Upload and monitor JSON task files\n- **Context Switching**: Navigate between different task contexts\n- **Task Navigation**: Easily navigate between tasks with previous/next buttons and dropdown selection\n- **Task Details**: View comprehensive task information including description, implementation details, and test strategy\n- **Dependency Tracking**: See task dependencies and dependents\n- **Progress Tracking**: Monitor task progress with visual indicators\n- **Search Functionality**: Find tasks by title or description\n- **Auto-Refresh**: Automatically refresh task data every 5 seconds\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js 18.x or later\n- npm or yarn\n\n### Installation\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/yourusername/task-execution-monitor.git\n   cd task-execution-monitor\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   # or\n   yarn install\n   ```\n\n3. Create the uploads directory:\n   ```bash\n   mkdir -p uploads\n   ```\n\n4. Start the development server:\n   ```bash\n   npm run dev\n   # or\n   yarn dev\n   ```\n\n5. Open [http://localhost:3000](http://localhost:3000) in your browser\n\n## Usage\n\n### Uploading Task Data\n\n1. Click the \"Select File\" button in the header\n2. Choose a JSON file with the appropriate structure (see [Data Format](#data-format))\n3. The file will be uploaded and parsed, and the tasks will be displayed\n\n### Navigating Tasks\n\n- Use the previous/next buttons to navigate sequentially through tasks\n- Use the task dropdown to jump directly to a specific task\n- Click on dependencies or dependents in the sidebar to navigate to those tasks\n\n### Searching Tasks\n\n- Use the search box to filter tasks by title or description\n- Results will update as you type\n\n### Auto-Refresh\n\n- Toggle the \"Auto 5s\" button to enable/disable automatic refreshing\n- When enabled, the application will check for changes to the task file every 5 seconds\n\n## Data Format\n\nThe application expects JSON files with the following structure:\n\n```json\n{\n  \"contextName\": {\n    \"tasks\": [\n      {\n        \"id\": 1,\n        \"title\": \"Task Title\",\n        \"description\": \"Task description\",\n        \"details\": \"Implementation details\",\n        \"testStrategy\": \"Test strategy\",\n        \"status\": \"pending|in-progress|done|cancelled\",\n        \"priority\": \"high|medium|low\",\n        \"dependencies\": [2, 3],\n        \"progress\": 75,\n        \"subtasks\": [\n          {\n            \"id\": 1,\n            \"title\": \"Subtask Title\",\n            \"description\": \"Subtask description\",\n            \"details\": \"Implementation details\",\n            \"testStrategy\": \"Test strategy\",\n            \"status\": \"pending|in-progress|done|cancelled\",\n            \"dependencies\": [],\n            \"parentTaskId\": 1\n          }\n        ]\n      }\n    ],\n    \"metadata\": {\n      \"created\": \"2023-11-01T10:00:00.000Z\",\n      \"updated\": \"2023-11-05T15:30:00.000Z\",\n      \"description\": \"Context description\"\n    }\n  }\n}\n```\n\n- Multiple contexts can be defined (e.g., \"master\", \"coverage\")\n- Each context contains a list of tasks and metadata\n- Tasks can have subtasks for hierarchical organization\n- Progress can be specified explicitly or calculated from subtask completion\n\n## Deployment\n\n### Deploying to Vercel\n\n1. Push your code to a GitHub repository\n2. Import the repository in Vercel\n3. Configure the build settings:\n   - Build Command: `npm run build`\n   - Output Directory: `.next`\n4. Deploy\n\n### Deploying to Netlify\n\n1. Push your code to a GitHub repository\n2. Import the repository in Netlify\n3. Configure the build settings:\n   - Build Command: `npm run build`\n   - Publish Directory: `.next`\n4. Add the following redirect rule to `netlify.toml`:\n   ```toml\n   [[redirects]]\n     from = \"/*\"\n     to = \"/index.html\"\n     status = 200\n   ```\n5. Deploy\n\n### Docker Deployment\n\n1. Create a Dockerfile:\n   ```dockerfile\n   FROM node:18-alpine\n   WORKDIR /app\n   COPY package*.json ./\n   RUN npm install\n   COPY . .\n   RUN npm run build\n   EXPOSE 3000\n   CMD [\"npm\", \"start\"]\n   ```\n\n2. Build and run the Docker image:\n   ```bash\n   docker build -t task-execution-monitor .\n   docker run -p 3000:3000 task-execution-monitor\n   ```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n```\n\nThis documentation provides:\n1. An overview of the application and its features\n2. Installation and setup instructions\n3. Usage guidelines\n4. Data format specifications\n5. Deployment instructions for various platforms\n6. Contributing guidelines and license information",
        "testStrategy": "1. Verify that the README.md file is comprehensive and covers all aspects of the application\n2. Check that installation instructions are clear and accurate\n3. Verify that the data format documentation matches the actual expected format\n4. Test the deployment instructions on at least one platform\n5. Have a team member review the documentation for clarity and completeness\n6. Verify that all code examples and commands work as expected",
        "priority": "medium",
        "dependencies": [
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23
        ],
        "status": "done",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-04T06:14:28.767Z",
      "updated": "2025-07-04T06:31:12.258Z",
      "description": "Tasks for master context"
    }
  }
}